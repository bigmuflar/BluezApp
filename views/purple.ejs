<!DOCTYPE html>
<html ng-app="module.dashboard"  lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <title>BLUP</title>
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" />
        <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
        <link rel="stylesheet" href="/css/beacon.css" />


        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-touch/1.5.9/angular-touch.js"></script>
        <script src="/js/controller.beacons.js"></script>
        <script src="/js/factory.dashboard.js"></script>

        <meta name="viewport" content="width=device-width, initial-scale=1">

    </head>
    <body ng-controller="BeaconController as beaconCtrl">
     <div class="beacon-item">
      <div class="title" ng-repeat="object in beaconCtrl.artifacts | filter: {id: 96783}:true">
         <h2 class="card-title text-xs-center">{{object.title}}</h2>
         <div class="card-block">
           <div class="card">
               <img class="card-img-top img-fluid" style="margin:0 auto;" ng-src="https://d1lfxha3ugu3d4.cloudfront.net/images/opencollection/objects/size2/{{object.primary_image}}" alt="Generic placeholder image">
               <div class="card-block text-xs-center">
                   <h4 class="card-subtitle">{{object.object_date}}</h4>
                   <h5 class="list-group-item-text">{{object.medium}}</h5>
                   <h6 class="list-group-item-text">{{object.artists.name}}</h6>
                   <p class="card-text" id="translate-text">
                     This manuscript is a copy of the sixteenth-century Hadiqat al-Su`ada (Garden of the Blessed), written in Baghdad by the Ottoman mystic Muhammad bin Sulayman, known as Fuzuli (circa 1483–1556). It is a text on the Prophet’s family and belongs to a group of illustrated devotional manuscripts executed in a provincial style in Baghdad under the patronage of the Ottoman sultan Mehmet III (r. 1595–1603). Here, the Prophet is shown veiled and seated on a pulpit, accompanied by his cousin and son-in-law, `Ali, and his grandchildren, Hasan and Husayn, all distinguished by haloes of fire. According to the Ottoman Turkish text, Muhammad is conversing with the angel Gabriel and the Angel of Death. The representation of Muhammad demonstrates that depictions of the Prophet, while not common, have long existed in the Islamic world.
                     Works on Paper Rotation, Islamic Galleries, June 2009 Ladan Akbarnia
                   </p>
                   <div class="audio-box" ng-controller="Speakit as speak">
                     <audio controls preload="none" id="audio">
                        <source id="wavsource" type="audio/ogg" ng-click="audio.play();">
                     </audio>
                     <script>
<<<<<<< HEAD
                     function Track(spriteLength, audioLead) {
                       var track = this,
                           audio = document.createElement('audio');
                           translate = document.getElementById('translate-text').innerHTML;
                       audio.src = '/api/speak?text='+translate;
=======
                     function Track(src, spriteLength, audioLead) {
                       var track = this,
                           audio = document.createElement('audio');
                       audio.src = src;
>>>>>>> 98abda06dd9e5e792d90aa7d4ab4549f5c7b3388
                       audio.autobuffer = true;
                       audio.load();
                       audio.muted = true; // makes no difference on iOS :(

                       /* This is the magic. Since we can't preload, and loading requires a user's
                          input. So we bind a touch event to the body, and fingers crossed, the
                          user taps. This means we can call play() and immediate pause - which will
                          start the download process - so it's effectively preloaded.

                          This logic is pretty insane, but forces iOS devices to successfully
                          skip an unload audio to a specific point in time.
                          first we play, when the play event fires we pause, allowing the asset
                          to be downloaded, once the progress event fires, we should have enough
                          to skip the currentTime head to a specific point. */

                       var force = function () {
                         audio.pause();
                         audio.removeEventListener('play', force, false);
                       };

                       var progress = function () {
                         audio.removeEventListener('progress', progress, false);
                         if (track.updateCallback !== null) track.updateCallback();
                       };

                       audio.addEventListener('play', force, false);
                       audio.addEventListener('progress', progress, false);

                       var kickoff = function () {
                         audio.play();
                         document.documentElement.removeEventListener(click, kickoff, true);
                       };

                       document.documentElement.addEventListener(click, kickoff, true);

                       this.updateCallback = null;
                       this.audio = audio;
                       this.playing = false;
                       this.lastUsed = 0;
                       this.spriteLength = spriteLength;
                       this.audioLead = audioLead;
                     }

                     Track.prototype.play = function (position) {
                       var track = this,
                           audio = this.audio,
                           lead = this.audioLead,
                           length = this.spriteLength,
                           time = lead + position * length,
                           nextTime = time + length;

                       clearInterval(track.timer);
                       track.playing = true;
                       track.lastUsed = +new Date;

                       audio.muted = false;
                       audio.pause();
                       try {
                         if (time == 0) time = 0.01; // yay hacks. Sometimes setting time to 0 doesn't play back
                         audio.currentTime = time;
                         audio.play();
                       } catch (e) {
                         this.updateCallback = function () {
                           track.updateCallback = null;
                           audio.currentTime = time;
                           audio.play();
                         };
                         audio.play();
                       }

                       track.timer = setInterval(function () {
                         if (audio.currentTime >= nextTime) {
                           audio.pause();
                           audio.muted = true;
                           clearInterval(track.timer);
                           player.playing = false;
                         }
                       }, 10);
                     };

                     var player = (function (src, n, spriteLength, audioLead) {
                       var tracks = [],
                           total = n,
                           i;

                       while (n--) {
                         tracks.push(new Track(src, spriteLength, audioLead));
                       }

                       return {
                         tracks: tracks,
                         play: function (position) {
                           var i = total,
                               track = null;

                           while (i--) {
                             if (tracks[i].playing === false) {
                               track = tracks[i];
                               break;
                             } else if (track === null || tracks[i].lastUsed < track.lastUsed) {
                               track = tracks[i];
                             }
                           }

                           if (track) {
                             track.play(position);
                           } else {
                             // console.log('could not find a track to play :(');
                           }
                         }
                       };
<<<<<<< HEAD
                     })(1, 1, 0.25);
=======
                     })('myaudiosprite.mp3', 1, 1, 0.25);
>>>>>>> 98abda06dd9e5e792d90aa7d4ab4549f5c7b3388

                     // myaudiosprite.mp3 is the complete audio sprite
                     // 1 = the number of tracks, increase this for the desktop
                     // 1 = the length of the individual audio clip
                     // 0.25 = the lead on the audio - hopefully zero, but in case any junk is added


<<<<<<< HEAD
                     // Usage: player.play(position)


                     </script>
=======
                     // Usage: player.play(position)                     </script>
>>>>>>> 98abda06dd9e5e792d90aa7d4ab4549f5c7b3388
                   </div>
               <div class="card-footer">
                 <h5>Share</h5>
                 <div class="social">
                   <span class="fa fa-google-plus-square fa-3x" href="#"></span>
                   <span class="fa fa-facebook-square fa-3x" href="#"></span>
                   <span class="fa fa-linkedin-square fa-3x" href="#"></span>
                   <span class="fa fa-pinterest-square fa-3x" href="#"></span>
                   <span class="fa fa-reddit-square fa-3x" href="#"></span>
                   <span class="fa fa-twitter-square fa-3x" href="#"></span>
                 </div>
               </tr>

               </div>
             </div>
           </div>
         </div>
       </div>
     </div>
     <!--Search Exhibit Information -->
     <div ng-controller="BeaconController as search" class="cards">
       <div class="input-group search">
         <input class="form-control" type="text" aria-label="Text input with dropdown button" placeholder="Search Museum Collections" ng-model="query"/>
         <div class="input-group-btn">
           <button class="btn btn-secondary dropdown-toggle" type="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" ng-model="orderList">Search</button>
               <div class="dropdown-menu">
                 <a class="dropdown-item" href="#" value="title" ng-selected="query">By Title</a>
                 <a class="dropdown-item" href="#" value="-object_date">By Newest</a>
                 <a class="dropdown-item" href="#" value="object_date">By Oldest</a>
               </div>
           </select>
         </div>
       </div>
       <div class="card-columns">
         <div class="repeat-box" ng-repeat="data in search.artifacts | filter:query | orderBy: orderList">
           <div class="card repeat">
             <img class="card-img-top img-thumbnail" ng-src="https://d1lfxha3ugu3d4.cloudfront.net/images/opencollection/objects/size2/{{data.primary_image}}" alt="Card image cap">
               <div class="card-block">
                 <div class="card-middle">
                   <h4 class="card-title">{{data.title}}</h4>
                   <h6 class="card-subtitle">{{data.object_date}}</h6>
                   <h6 class="subtitle">{{data.medium}}</h6>
                   Museum location: <i>{{data.museum_location.name}}</i><br/>
                 </div>
                   <div class="card-footer">
                     <button class="btn btn-primary">Find It</button>
                   </div>
               </div>
             </div>
           </div>
         </div>
         <!-- FOOTER -->
         <footer ng-cloak>
             <% include ./footer %>
         </footer>
   </body>
</html>
